---
title: "BEE 4750/5750 Homework 2"
author: "Steven Wu (skw74)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(dirname(@__FILE__))
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia

#setting up constants
ka = 0.55
kc = 0.35
kn = 0.25
Cs = 10 #mg/L
Coi = 7.5 #mg/L; initial DO
Co1 = 5 #mg/L; DO from waste source 1
Co2 = 5 #mg/L; DO from waste source 2
Qi = 100000 #m^3/d; initial flow
Q1 = 10000 #m^3/d; flow from waste source 1
Q2 = 15000 #m^3/d; flow from waste source 2
CBODi = 5 #mg/L; initial CBOD
CBOD1 = 50 #mg/L; CBOD from waste source 1
CBOD2 = 45 #mg/L; CBOD from waste source 2
NBODi = 5 #mg/L; initial NBOD
NBOD1 = 35 #mg/L; NBOD from waste source 1
NBOD2 = 35 #mg/L; NBOD from waste source 2
U= 6 #km/d

function DOconcentration(x)
#x is position from first waste source in km; has to be non-negative
  a1 = exp((-1*ka*x)/U)
  a2 = (kc/(ka-kc))*(exp((-1*kc*x)/U)-exp((-1*ka*x)/U))
  a3 = (kn/(ka-kn))*(exp((-1*kn*x)/U)-exp((-1*ka*x)/U))
  Co_post1 = (Coi*Qi+Co1*Q1)/(Q1+Qi) #mass balance
  Bo_post1 = (CBODi*Qi+CBOD1*Q1)/(Q1+Qi)
  No_post1 = (NBODi*Qi+NBOD1*Q1)/(Q1+Qi)
  if x<15
    return Cs*(1-a1)+Co_post1*a1-Bo_post1*a2-No_post1*a3
  else
    Co_post2 = (Co_post1*(Q1+Qi)+Co2*Q2)/(Qi+Q1+Q2)
    Bo_post2 = (Bo_post1*(Q1+Qi)+CBOD2*Q2)/(Qi+Q1+Q2)
    No_post2 = (No_post1*(Q1+Qi)+NBOD2*Q2)/(Qi+Q1+Q2)
    return Cs*(1-a1)+Co_post2*a1-Bo_post2*a2-No_post2*a3
  end
end

f = DOconcentration
using Plots
plot(f,0,50,ylabel="DO Concentration (mg/L)",xlabel="Distance from Waste Source 1 (km)")

```

## Problem 1.2
```julia
function minDistance()
i=15
conc = DOconcentration(i)
while conc < 6
  i = i+1
  conc=DOconcentration(i)
end
return i
end

```
The DO levels return to above 6 mg/L at `j minDistance()-15` km from the second waste source.

## Problem 1.3
```julia
function treatment()
  percentremoval = 0
  #setting variables again in case other functions changed them
  global CBODi = 5
  global NBODi = 5
  global CBOD1 = 50
  global NBOD1 = 35
  global CBOD2 = 45
  global NBOD2 = 35
  CBOD2base = CBOD2 
  NBOD2base = NBOD2
  for i in 1:100
    if DOconcentration(15)<4 #Concentration is at its lowest at x=15, so only need to check this point
      percentremoval = i*0.01
      global CBOD2 = CBOD2base*(1-percentremoval)
      global NBOD2 = NBOD2base*(1-percentremoval)
      #print(DOconcentration(15))
      #print(percentremoval)
    end
  end
  return percentremoval
end
```
It takes `j treatment()*100` % waste removal from source 2 so the DO levels never reach below 4 mg/L.

## Problem 1.4
```julia
function treatment2()
  #setting variables again in case other functions changed them
  global CBODi = 5
  global NBODi = 5
  global CBOD1 = 50
  global NBOD1 = 35
  global CBOD2 = 45
  global NBOD2 = 35
  DOconcentration(15)
  percentremoval = 0
  CBOD1base = 50
  NBOD1base = 35
  CBOD2base = 45
  NBOD2base = 35
  for i in 1:100
    if DOconcentration(15)<4
      percentremoval = i*0.01
      global CBOD2 = CBOD2base*(1-percentremoval)
      global NBOD2 = NBOD2base*(1-percentremoval)
      global CBOD1 = CBOD1base*(1-percentremoval)
      global NBOD1 = NBOD1base*(1-percentremoval)
      #print(DOconcentration(15))
      #print(percentremoval)
    end
  end
  return percentremoval
end
```
It takes `j treatment2()*100` % waste removal from both sources so the DO levels never reach below 4 mg/L.

## Problem 1.5
Based on the results in 1.3 and 1.4, I would choose to treat waste stream 2 alone. 25% of both streams would mean
$.25(50+35+45+35)=41.25 mg/L$ of waste treated, whereas treating waste stream 2 only involves treating $.48*(45+35)=38.4 mg/L$
of waste, so technically it's more efficient. However, an important consideration is the cost of treatment, specifically if treating
NBOD costs more or less than treating CBOD. This would matter because the ratio of CBOD:NBOD treated changes depending on the treatment
plan. 


## Problem 1.6
```julia 
using Random

function failProbability()
  c = 0
  p = treatment() #percent removal for treating waste stream 2 only
  samplesize = 1000
  Random.seed!(1)
  for i in 1:samplesize
    global CBODi = 3*rand()+4
    global NBODi = 5*rand()+3
    global CBOD1 = 50
    global NBOD1 = 35
    global CBOD2 = p*45
    global NBOD2 = p*35
    DO = DOconcentration(15)
    if DO > 4
      c += 1
    end
  end
return c/samplesize 
end
```
Based on the simulation above, the probability that the treatment plan will fail is `j failProbability()*100`%.

## Problem 1.7

```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end

function failProbability2()
  c=0
  p = treatment() #percent removal for treating waste stream 2 only
  samplesize = 1000
  sample = sample_correlated_uniform(samplesize,(4,7),(3,8))
  for i in 1:samplesize
    global CBODi = sample[i,1]
    global NBODi = sample[i,2]
    global CBOD1 = 50
    global NBOD1 = 35
    global CBOD2 = p*45
    global NBOD2 = p*35
    DO = DOconcentration(15)
    if DO > 4
      c += 1
    end
  end
return c/samplesize 
end
```
Now the probability of failure becomes `j failProbability2()*100`%.

## Problem 1.8


```

# References